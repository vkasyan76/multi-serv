/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    tenants: Tenant;
    tags: Tag;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    categories: {
      subcategories: 'categories';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * App username (set once on create).
   */
  username: string;
  /**
   * Raw username from Clerk (for reference only).
   */
  clerkUsername?: string | null;
  usernameSource?: ('app' | 'clerk') | null;
  /**
   * When username was set.
   */
  usernameSyncedAt?: string | null;
  email?: string | null;
  clerkUserId?: string | null;
  roles?: ('super-admin' | 'user')[] | null;
  tenants?:
    | {
        tenant: string | Tenant;
        id?: string | null;
      }[]
    | null;
  /**
   * User's location/address
   */
  location?: string | null;
  /**
   * User's country
   */
  country?: string | null;
  /**
   * User's preferred language
   */
  language?: ('en' | 'es' | 'fr' | 'de' | 'it' | 'pt') | null;
  /**
   * Location coordinates with metadata
   */
  coordinates?: {
    /**
     * Location latitude
     */
    lat?: number | null;
    /**
     * Location longitude
     */
    lng?: number | null;
    /**
     * City name from IP geolocation
     */
    city?: string | null;
    /**
     * Country ISO code (e.g., DE, US)
     */
    countryISO?: string | null;
    /**
     * Full country name (e.g., Germany, United States)
     */
    countryName?: string | null;
    /**
     * Region/state name from IP geolocation
     */
    region?: string | null;
    /**
     * Postal/ZIP code
     */
    postalCode?: string | null;
    /**
     * Street address
     */
    street?: string | null;
    /**
     * Whether coordinates were detected from IP
     */
    ipDetected?: boolean | null;
    /**
     * Whether coordinates were manually set by user
     */
    manuallySet?: boolean | null;
  };
  /**
   * Whether the user has completed onboarding
   */
  onboardingCompleted?: boolean | null;
  /**
   * When the user's geolocation was last updated
   */
  geoUpdatedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  /**
   * This is the name of the store.
   */
  name: string;
  /**
   * This is the subdomain of the store  (e.g. [slug].yourdomain.com.)
   */
  slug: string;
  image?: (string | null) | Media;
  /**
   * Stripe account ID associated with your shop.
   */
  stripeAccountId: string;
  /**
   * You cannot create products until you submit your stripe details.
   */
  stripeDetailsSubmitted?: boolean | null;
  /**
   * Vendor's first name
   */
  firstName?: string | null;
  /**
   * Vendor's last name
   */
  lastName?: string | null;
  /**
   * Vendor's bio/description
   */
  bio?: string | null;
  /**
   * Types of services offered
   */
  services?: ('on-site' | 'on-line')[] | null;
  /**
   * Service categories
   */
  categories?: (string | Category)[] | null;
  /**
   * Service subcategories
   */
  subcategories?: (string | Category)[] | null;
  tags?: (string | Tag)[] | null;
  /**
   * Vendor's website URL
   */
  website?: string | null;
  phone?: string | null;
  /**
   * Vendor's hourly rate in EUR
   */
  hourlyRate?: number | null;
  /**
   * The user account associated with this tenant
   */
  user: string | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  tenant?: (string | null) | Tenant;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  slug: string;
  color?: string | null;
  parent?: (string | null) | Category;
  subcategories?: {
    docs?: (string | Category)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name: string;
  tenants?: (string | Tenant)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  username?: T;
  clerkUsername?: T;
  usernameSource?: T;
  usernameSyncedAt?: T;
  email?: T;
  clerkUserId?: T;
  roles?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        id?: T;
      };
  location?: T;
  country?: T;
  language?: T;
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
        city?: T;
        countryISO?: T;
        countryName?: T;
        region?: T;
        postalCode?: T;
        street?: T;
        ipDetected?: T;
        manuallySet?: T;
      };
  onboardingCompleted?: T;
  geoUpdatedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  color?: T;
  parent?: T;
  subcategories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  image?: T;
  stripeAccountId?: T;
  stripeDetailsSubmitted?: T;
  firstName?: T;
  lastName?: T;
  bio?: T;
  services?: T;
  categories?: T;
  subcategories?: T;
  tags?: T;
  website?: T;
  phone?: T;
  hourlyRate?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  tenants?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}